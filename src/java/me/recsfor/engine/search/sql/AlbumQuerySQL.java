/*
 * Copyright 2019 Lucas Kitaev.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package me.recsfor.engine.search.sql;

import static java.time.LocalDate.of;
import static java.time.Year.of;
import static java.time.YearMonth.of;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.temporal.Temporal;
import java.util.UUID;

import javax.sql.DataSource;

import me.recsfor.group.model.Album;

/**
 * Queries the recsforme database for data related to Album entities.
 * @author lkitaev
 */
public class AlbumQuerySQL implements Queryable {
	private Connection con;
	private int id;
	private UUID gid;

	/**
	 * @param id the uuid of the release group
	 * @param db the database to query
	 * @throws SQLException if the query fails or no rows are found
	 */
	public AlbumQuerySQL(String id, DataSource db) throws SQLException {
		gid = UUID.fromString(id);
		con = db.getConnection();
		PreparedStatement ps = con.prepareStatement("SELECT id FROM release_group WHERE gid = ?");
		ps.setObject(1, gid);
		ResultSet rs = ps.executeQuery();
		if (rs.next())
			this.id = rs.getInt(1);
		else
			throw new SQLException(id + " was not found in the database");
	}
	
	/**
	 * @param id the database id of the release group
	 * @param con the connection to query
	 */
	protected AlbumQuerySQL(int id, Connection con) {
		this.con = con;
		this.id = id;
		gid = null;
	}

	/**
	 * @return the Album generated by this query
	 * @throws SQLException if a contained query fails
	 */
	@Override
	public Album query() throws SQLException {
		return null; // TODO return an album with the queried data
	}
	
	/**
	 * Creates an Album with the specified attributes and queried first release.
	 * @param gid the release group uuid
	 * @param title the album title
	 * @return the Album generated by these parameters
	 */
	protected Album basicAlbum(UUID gid, String title) throws SQLException {
		return new Album(gid, title, queryFirstRelease());
	}
	
	/**
	 * @return the title of the album
	 * @throws SQLException if the query fails
	 */
	public String queryTitle() throws SQLException {
		PreparedStatement ps = con.prepareStatement("SELECT name FROM release_group WHERE id = ?");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		rs.next();
		return rs.getString(1);
	}
	
	/**
	 * Determines the <code>Temporal</code> value of the album's first release.
	 * Will be <code>LocalDate</code> if year, month, and day are all known.
	 * Will be <code>YearMonth</code> if the year and month are both known.
	 * Will be <code>Year</code> if only the year is known.
	 * Will be <code>null</code> if none of the above values are known.
	 * @return the point in time at which the album first released
	 * @throws SQLException if the query fails
	 */
	public Temporal queryFirstRelease() throws SQLException {
		PreparedStatement ps = con.prepareStatement("SELECT first_release_date_year, first_release_date_month,"
				+ " first_release_date_day FROM release_group_meta WHERE id = ?");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		rs.next();
		int year = rs.getInt(1);
		int month = rs.getInt(2);
		int day = rs.getInt(3);
		if (year != 0) {
			if (month != 0) {
				if (day != 0) {
					return of(year, month, day);
				}
				return of(year, month);
			}
			return of(year);
		}
		return null;
	}

}
