/*
 * Copyright 2019 Lucas Kitaev.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package me.recsfor.engine.search.sql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;

import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;

import me.recsfor.group.model.Artist;
import me.recsfor.group.model.Album;

/**
 * Queries the recsforme database for data related to Artist entities.
 * @author lkitaev
 */
public class ArtistQuerySQL implements Queryable {
	private Connection con;
	private int id;
	private UUID gid;

	/**
	 * @param id the uuid of the artist
	 * @param db the database to query
	 * @throws SQLException if the query fails or no rows are found
	 */
	public ArtistQuerySQL(String id, DataSource db) throws SQLException {
		gid = UUID.fromString(id);
		con = db.getConnection();
		PreparedStatement ps = con.prepareStatement("SELECT id FROM artist WHERE gid = ?");
		ps.setObject(1, gid);
		ResultSet rs = ps.executeQuery();
		if (rs.next())
			this.id = rs.getInt(1);
		else
			throw new SQLException(id + " was not found in the database.");
	}
	
	/**
	 * @return the Artist generated by this query
	 * @throws SQLException if a contained query fails
	 */
	@Override
	public Artist query() throws SQLException {
		PreparedStatement ps = con.prepareStatement("SELECT name, sort_name, comment,"
				+ " begin_date_year, begin_date_month, begin_date_day, end_date_year, end_date_month, end_date_day"
				+ " FROM artist WHERE id = ?");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		rs.next();
		return new Artist(gid, rs.getString(1), rs.getString(2), queryType(), queryGender(), rs.getString(3),
				Queryable.toTemporal(rs.getInt(4), rs.getInt(5), rs.getInt(6)),
				Queryable.toTemporal(rs.getInt(7), rs.getInt(8), rs.getInt(9)), queryDiscog());
	}
	
	/**
	 * @return the type of the artist
	 * @throws SQLException if the query fails
	 */
	public String queryType() throws SQLException {
		PreparedStatement ps = con.prepareStatement("SELECT name FROM artist_type"
				+ " WHERE id = (SELECT type FROM artist WHERE id = ?)");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		if (rs.next())
			return rs.getString(1);
		return "Unknown type";
	}
	
	/**
	 * @return the gender of the artist
	 * @throws SQLException if the query fails
	 */
	public String queryGender() throws SQLException {
		PreparedStatement ps = con.prepareStatement("SELECT name FROM gender WHERE id ="
				+ " (SELECT gender FROM artist WHERE id = ?)");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		if (rs.next())
			return rs.getString(1);
		return "";
	}
	
	/**
	 * @return the albums that are associated with the artist
	 * @throws SQLException if the query fails
	 */
	public Set<Album> queryDiscog() throws SQLException {
		Set<Album> list = new TreeSet<>();
		PreparedStatement ps = con.prepareStatement("SELECT gid, name,"
				+ " first_release_date_year, first_release_date_month, first_release_date_day"
				+ " FROM release_group, release_group_meta WHERE artist_credit IN"
				+ " (SELECT artist_credit FROM artist_credit_name WHERE artist = ?)"
				+ " AND release_group.id = release_group_meta.id");
		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		while (rs.next())
			list.add(new Album(rs.getObject(1, UUID.class), rs.getString(2),
					Queryable.toTemporal(rs.getInt(3), rs.getInt(4), rs.getInt(5))));
		return list;
	}

}
